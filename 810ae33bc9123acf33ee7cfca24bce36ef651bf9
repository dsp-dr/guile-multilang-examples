Context: Property-Based Testing Framework Development

Task: Fix and execute property-based testing for Guile multilanguage compilation
System: FreeBSD 14.3-RELEASE with GNU Guile 3.0.10

Issues Fixed:
1. Syntax Error: Changed optional parameter syntax from #:param (default) to #:key (param default)
   - This is the correct Guile syntax for define* optional keyword arguments
2. Name Conflicts: Renamed 'random' and 'random-integer' to 'random-real' and 'random-int'
   - Avoided shadowing SRFI-27 exports
3. Macro Syntax: Added missing closing parenthesis in when-main macro definition
4. Script Detection: Updated command-line detection to check for script name suffix

Technical Details:
- Used SRFI-27 for random number generation with proper seed initialization
- Implemented property generators for integers, lists, and Elisp expressions
- Created 5 property tests covering compilation correctness
- Achieved 100% pass rate on all properties (100/100 tests)

Properties Verified:
1. Arithmetic Preservation - Math operations produce identical results pre/post compilation
2. List Operations - List functions (mapcar, etc.) work correctly in Elisp
3. Function Definitions - defun compiles and produces callable functions
4. Compilation Termination - All valid expressions compile without hanging
5. Fuzz Testing - Random expression generation achieves 100% compilation success

This validates the robustness of the Guile multilanguage compilation pipeline,
particularly for Elisp-to-bytecode translation. The property-based approach
provides stronger guarantees than example-based testing.

Related Files:
- examples/formal-verification/property-tests.scm (main test file)
- specifications/*.tla (TLA+ formal specifications added)
- specifications/verify-specs.sh (verification script)
